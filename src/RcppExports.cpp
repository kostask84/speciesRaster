// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// spListPerCell
List spListPerCell(NumericMatrix input);
RcppExport SEXP _speciesRaster_spListPerCell(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(spListPerCell(input));
    return rcpp_result_gen;
END_RCPP
}
// sort_
NumericVector sort_(NumericVector x, int cutoff);
RcppExport SEXP _speciesRaster_sort_(SEXP xSEXP, SEXP cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type cutoff(cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(sort_(x, cutoff));
    return rcpp_result_gen;
END_RCPP
}
// returnTopIndices
List returnTopIndices(NumericMatrix input, IntegerVector cutoff);
RcppExport SEXP _speciesRaster_returnTopIndices(SEXP inputSEXP, SEXP cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type input(inputSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type cutoff(cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(returnTopIndices(input, cutoff));
    return rcpp_result_gen;
END_RCPP
}
// meanNNdist
double meanNNdist(NumericVector input);
RcppExport SEXP _speciesRaster_meanNNdist(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(meanNNdist(input));
    return rcpp_result_gen;
END_RCPP
}
// cellAvg
NumericVector cellAvg(List input, NumericVector trait, String stat);
RcppExport SEXP _speciesRaster_cellAvg(SEXP inputSEXP, SEXP traitSEXP, SEXP statSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type input(inputSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type trait(traitSEXP);
    Rcpp::traits::input_parameter< String >::type stat(statSEXP);
    rcpp_result_gen = Rcpp::wrap(cellAvg(input, trait, stat));
    return rcpp_result_gen;
END_RCPP
}
// intersectList
List intersectList(List input, StringVector vec);
RcppExport SEXP _speciesRaster_intersectList(SEXP inputSEXP, SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type input(inputSEXP);
    Rcpp::traits::input_parameter< StringVector >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(intersectList(input, vec));
    return rcpp_result_gen;
END_RCPP
}
// flattenMatrix
NumericVector flattenMatrix(NumericMatrix mat);
RcppExport SEXP _speciesRaster_flattenMatrix(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(flattenMatrix(mat));
    return rcpp_result_gen;
END_RCPP
}
// LegendreDiffIndex
double LegendreDiffIndex(StringVector commA, StringVector commB);
RcppExport SEXP _speciesRaster_LegendreDiffIndex(SEXP commASEXP, SEXP commBSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< StringVector >::type commA(commASEXP);
    Rcpp::traits::input_parameter< StringVector >::type commB(commBSEXP);
    rcpp_result_gen = Rcpp::wrap(LegendreDiffIndex(commA, commB));
    return rcpp_result_gen;
END_RCPP
}
// jaccardDissimilarity
double jaccardDissimilarity(StringVector commA, StringVector commB);
RcppExport SEXP _speciesRaster_jaccardDissimilarity(SEXP commASEXP, SEXP commBSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< StringVector >::type commA(commASEXP);
    Rcpp::traits::input_parameter< StringVector >::type commB(commBSEXP);
    rcpp_result_gen = Rcpp::wrap(jaccardDissimilarity(commA, commB));
    return rcpp_result_gen;
END_RCPP
}
// jaccardTurnover
double jaccardTurnover(StringVector commA, StringVector commB);
RcppExport SEXP _speciesRaster_jaccardTurnover(SEXP commASEXP, SEXP commBSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< StringVector >::type commA(commASEXP);
    Rcpp::traits::input_parameter< StringVector >::type commB(commBSEXP);
    rcpp_result_gen = Rcpp::wrap(jaccardTurnover(commA, commB));
    return rcpp_result_gen;
END_RCPP
}
// jaccardNestedness
double jaccardNestedness(StringVector commA, StringVector commB);
RcppExport SEXP _speciesRaster_jaccardNestedness(SEXP commASEXP, SEXP commBSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< StringVector >::type commA(commASEXP);
    Rcpp::traits::input_parameter< StringVector >::type commB(commBSEXP);
    rcpp_result_gen = Rcpp::wrap(jaccardNestedness(commA, commB));
    return rcpp_result_gen;
END_RCPP
}
// ListIsEmpty
std::vector<std::vector<int> > ListIsEmpty(List input);
RcppExport SEXP _speciesRaster_ListIsEmpty(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(ListIsEmpty(input));
    return rcpp_result_gen;
END_RCPP
}
// ListIsEmptyR
List ListIsEmptyR(List input);
RcppExport SEXP _speciesRaster_ListIsEmptyR(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(ListIsEmptyR(input));
    return rcpp_result_gen;
END_RCPP
}
// whichCpp
IntegerVector whichCpp(NumericVector x);
RcppExport SEXP _speciesRaster_whichCpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(whichCpp(x));
    return rcpp_result_gen;
END_RCPP
}
// characterUnlist
StringVector characterUnlist(const List& list);
RcppExport SEXP _speciesRaster_characterUnlist(SEXP listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const List& >::type list(listSEXP);
    rcpp_result_gen = Rcpp::wrap(characterUnlist(list));
    return rcpp_result_gen;
END_RCPP
}
// naomit
std::vector<int> naomit(std::vector<int> x);
RcppExport SEXP _speciesRaster_naomit(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(naomit(x));
    return rcpp_result_gen;
END_RCPP
}
// dropNeg
std::vector<int> dropNeg(std::vector<int> x);
RcppExport SEXP _speciesRaster_dropNeg(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(dropNeg(x));
    return rcpp_result_gen;
END_RCPP
}
// multiPrepCpp
std::vector<double> multiPrepCpp(List allComm);
RcppExport SEXP _speciesRaster_multiPrepCpp(SEXP allCommSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type allComm(allCommSEXP);
    rcpp_result_gen = Rcpp::wrap(multiPrepCpp(allComm));
    return rcpp_result_gen;
END_RCPP
}
// multiPrep
std::vector<double> multiPrep(List allComm);
RcppExport SEXP _speciesRaster_multiPrep(SEXP allCommSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type allComm(allCommSEXP);
    rcpp_result_gen = Rcpp::wrap(multiPrep(allComm));
    return rcpp_result_gen;
END_RCPP
}
// betaJAC
double betaJAC(std::vector<double> vec);
RcppExport SEXP _speciesRaster_betaJAC(SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(betaJAC(vec));
    return rcpp_result_gen;
END_RCPP
}
// betaJTU
double betaJTU(std::vector<double> vec);
RcppExport SEXP _speciesRaster_betaJTU(SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(betaJTU(vec));
    return rcpp_result_gen;
END_RCPP
}
// betaJNE
double betaJNE(std::vector<double> vec);
RcppExport SEXP _speciesRaster_betaJNE(SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(betaJNE(vec));
    return rcpp_result_gen;
END_RCPP
}
// betaSOR
double betaSOR(std::vector<double> vec);
RcppExport SEXP _speciesRaster_betaSOR(SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(betaSOR(vec));
    return rcpp_result_gen;
END_RCPP
}
// betaSIM
double betaSIM(std::vector<double> vec);
RcppExport SEXP _speciesRaster_betaSIM(SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(betaSIM(vec));
    return rcpp_result_gen;
END_RCPP
}
// betaSNE
double betaSNE(std::vector<double> vec);
RcppExport SEXP _speciesRaster_betaSNE(SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(betaSNE(vec));
    return rcpp_result_gen;
END_RCPP
}
// calcBetaPairwise
NumericVector calcBetaPairwise(List spByCell, List nbList, String metric);
RcppExport SEXP _speciesRaster_calcBetaPairwise(SEXP spByCellSEXP, SEXP nbListSEXP, SEXP metricSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type spByCell(spByCellSEXP);
    Rcpp::traits::input_parameter< List >::type nbList(nbListSEXP);
    Rcpp::traits::input_parameter< String >::type metric(metricSEXP);
    rcpp_result_gen = Rcpp::wrap(calcBetaPairwise(spByCell, nbList, metric));
    return rcpp_result_gen;
END_RCPP
}
// calcBetaMultiSite
NumericVector calcBetaMultiSite(List spByCell, List nbList, String metric);
RcppExport SEXP _speciesRaster_calcBetaMultiSite(SEXP spByCellSEXP, SEXP nbListSEXP, SEXP metricSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type spByCell(spByCellSEXP);
    Rcpp::traits::input_parameter< List >::type nbList(nbListSEXP);
    Rcpp::traits::input_parameter< String >::type metric(metricSEXP);
    rcpp_result_gen = Rcpp::wrap(calcBetaMultiSite(spByCell, nbList, metric));
    return rcpp_result_gen;
END_RCPP
}
// calcBetaMultiSiteBlock
NumericVector calcBetaMultiSiteBlock(List spByCell, List nbList, String metric);
RcppExport SEXP _speciesRaster_calcBetaMultiSiteBlock(SEXP spByCellSEXP, SEXP nbListSEXP, SEXP metricSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type spByCell(spByCellSEXP);
    Rcpp::traits::input_parameter< List >::type nbList(nbListSEXP);
    Rcpp::traits::input_parameter< String >::type metric(metricSEXP);
    rcpp_result_gen = Rcpp::wrap(calcBetaMultiSiteBlock(spByCell, nbList, metric));
    return rcpp_result_gen;
END_RCPP
}
// mapComm
List mapComm(CharacterVector uniqueCommLabels, CharacterVector allComm);
RcppExport SEXP _speciesRaster_mapComm(SEXP uniqueCommLabelsSEXP, SEXP allCommSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type uniqueCommLabels(uniqueCommLabelsSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type allComm(allCommSEXP);
    rcpp_result_gen = Rcpp::wrap(mapComm(uniqueCommLabels, allComm));
    return rcpp_result_gen;
END_RCPP
}
// c_which_int
int c_which_int(std::vector<int> vec, int x);
RcppExport SEXP _speciesRaster_c_which_int(SEXP vecSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(c_which_int(vec, x));
    return rcpp_result_gen;
END_RCPP
}
// getRootToTipEdges
List getRootToTipEdges(List phylo);
RcppExport SEXP _speciesRaster_getRootToTipEdges(SEXP phyloSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type phylo(phyloSEXP);
    rcpp_result_gen = Rcpp::wrap(getRootToTipEdges(phylo));
    return rcpp_result_gen;
END_RCPP
}
// phyloBranchRanges
List phyloBranchRanges(List phylo, List speciesList, List tipEdges);
RcppExport SEXP _speciesRaster_phyloBranchRanges(SEXP phyloSEXP, SEXP speciesListSEXP, SEXP tipEdgesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type phylo(phyloSEXP);
    Rcpp::traits::input_parameter< List >::type speciesList(speciesListSEXP);
    Rcpp::traits::input_parameter< List >::type tipEdges(tipEdgesSEXP);
    rcpp_result_gen = Rcpp::wrap(phyloBranchRanges(phylo, speciesList, tipEdges));
    return rcpp_result_gen;
END_RCPP
}
// countCells
NumericVector countCells(List cellList, StringVector vec);
RcppExport SEXP _speciesRaster_countCells(SEXP cellListSEXP, SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type cellList(cellListSEXP);
    Rcpp::traits::input_parameter< StringVector >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(countCells(cellList, vec));
    return rcpp_result_gen;
END_RCPP
}
// mergeLists
List mergeLists(List input);
RcppExport SEXP _speciesRaster_mergeLists(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(mergeLists(input));
    return rcpp_result_gen;
END_RCPP
}
// getComponentA
std::vector<std::string> getComponentA(std::vector<std::string> commI, std::vector<std::string> commJ);
RcppExport SEXP _speciesRaster_getComponentA(SEXP commISEXP, SEXP commJSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type commI(commISEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type commJ(commJSEXP);
    rcpp_result_gen = Rcpp::wrap(getComponentA(commI, commJ));
    return rcpp_result_gen;
END_RCPP
}
// getComponentB
std::vector<std::string> getComponentB(std::vector<std::string> commI, std::vector<std::string> commJ);
RcppExport SEXP _speciesRaster_getComponentB(SEXP commISEXP, SEXP commJSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type commI(commISEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type commJ(commJSEXP);
    rcpp_result_gen = Rcpp::wrap(getComponentB(commI, commJ));
    return rcpp_result_gen;
END_RCPP
}
// getComponentC
std::vector<std::string> getComponentC(std::vector<std::string> commI, std::vector<std::string> commJ);
RcppExport SEXP _speciesRaster_getComponentC(SEXP commISEXP, SEXP commJSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type commI(commISEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type commJ(commJSEXP);
    rcpp_result_gen = Rcpp::wrap(getComponentC(commI, commJ));
    return rcpp_result_gen;
END_RCPP
}
// c_which_char
int c_which_char(std::vector<std::string> vec, std::string x);
RcppExport SEXP _speciesRaster_c_which_char(SEXP vecSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< std::string >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(c_which_char(vec, x));
    return rcpp_result_gen;
END_RCPP
}
// weightedPhylo
double weightedPhylo(std::vector<std::string> a, std::vector<std::string> tipLabels, List spEdges, std::vector<double> edgeArea1, std::vector<double> edgeArea2);
RcppExport SEXP _speciesRaster_weightedPhylo(SEXP aSEXP, SEXP tipLabelsSEXP, SEXP spEdgesSEXP, SEXP edgeArea1SEXP, SEXP edgeArea2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type a(aSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type tipLabels(tipLabelsSEXP);
    Rcpp::traits::input_parameter< List >::type spEdges(spEdgesSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type edgeArea1(edgeArea1SEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type edgeArea2(edgeArea2SEXP);
    rcpp_result_gen = Rcpp::wrap(weightedPhylo(a, tipLabels, spEdges, edgeArea1, edgeArea2));
    return rcpp_result_gen;
END_RCPP
}
// calcRWTurnover_taxonomic_old
NumericVector calcRWTurnover_taxonomic_old(List spByCell, List nbList);
RcppExport SEXP _speciesRaster_calcRWTurnover_taxonomic_old(SEXP spByCellSEXP, SEXP nbListSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type spByCell(spByCellSEXP);
    Rcpp::traits::input_parameter< List >::type nbList(nbListSEXP);
    rcpp_result_gen = Rcpp::wrap(calcRWTurnover_taxonomic_old(spByCell, nbList));
    return rcpp_result_gen;
END_RCPP
}
// calcRWTurnover_rangeWeighted_old
NumericVector calcRWTurnover_rangeWeighted_old(List spByCell, List nbList, NumericVector cellCountsR);
RcppExport SEXP _speciesRaster_calcRWTurnover_rangeWeighted_old(SEXP spByCellSEXP, SEXP nbListSEXP, SEXP cellCountsRSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type spByCell(spByCellSEXP);
    Rcpp::traits::input_parameter< List >::type nbList(nbListSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cellCountsR(cellCountsRSEXP);
    rcpp_result_gen = Rcpp::wrap(calcRWTurnover_rangeWeighted_old(spByCell, nbList, cellCountsR));
    return rcpp_result_gen;
END_RCPP
}
// calcRWTurnover_phyloRangeWeighted_old
NumericVector calcRWTurnover_phyloRangeWeighted_old(List spByCell, List nbList, List phylo, List spEdges, NumericMatrix edgeArea);
RcppExport SEXP _speciesRaster_calcRWTurnover_phyloRangeWeighted_old(SEXP spByCellSEXP, SEXP nbListSEXP, SEXP phyloSEXP, SEXP spEdgesSEXP, SEXP edgeAreaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type spByCell(spByCellSEXP);
    Rcpp::traits::input_parameter< List >::type nbList(nbListSEXP);
    Rcpp::traits::input_parameter< List >::type phylo(phyloSEXP);
    Rcpp::traits::input_parameter< List >::type spEdges(spEdgesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type edgeArea(edgeAreaSEXP);
    rcpp_result_gen = Rcpp::wrap(calcRWTurnover_phyloRangeWeighted_old(spByCell, nbList, phylo, spEdges, edgeArea));
    return rcpp_result_gen;
END_RCPP
}
// calcRWTurnover_taxonomic_singleCell
NumericVector calcRWTurnover_taxonomic_singleCell(StringVector focalCell, List nbList);
RcppExport SEXP _speciesRaster_calcRWTurnover_taxonomic_singleCell(SEXP focalCellSEXP, SEXP nbListSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< StringVector >::type focalCell(focalCellSEXP);
    Rcpp::traits::input_parameter< List >::type nbList(nbListSEXP);
    rcpp_result_gen = Rcpp::wrap(calcRWTurnover_taxonomic_singleCell(focalCell, nbList));
    return rcpp_result_gen;
END_RCPP
}
// calcRWTurnover_rangeWeighted_singleCell
NumericVector calcRWTurnover_rangeWeighted_singleCell(StringVector focalCell, List nbList, NumericVector cellCountsR);
RcppExport SEXP _speciesRaster_calcRWTurnover_rangeWeighted_singleCell(SEXP focalCellSEXP, SEXP nbListSEXP, SEXP cellCountsRSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< StringVector >::type focalCell(focalCellSEXP);
    Rcpp::traits::input_parameter< List >::type nbList(nbListSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cellCountsR(cellCountsRSEXP);
    rcpp_result_gen = Rcpp::wrap(calcRWTurnover_rangeWeighted_singleCell(focalCell, nbList, cellCountsR));
    return rcpp_result_gen;
END_RCPP
}
// calcRWTurnover_phyloRangeWeighted_singleCell
NumericVector calcRWTurnover_phyloRangeWeighted_singleCell(StringVector focalCell, List nbList, StringVector phyloTipLabels, List spEdges, NumericMatrix edgeArea);
RcppExport SEXP _speciesRaster_calcRWTurnover_phyloRangeWeighted_singleCell(SEXP focalCellSEXP, SEXP nbListSEXP, SEXP phyloTipLabelsSEXP, SEXP spEdgesSEXP, SEXP edgeAreaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< StringVector >::type focalCell(focalCellSEXP);
    Rcpp::traits::input_parameter< List >::type nbList(nbListSEXP);
    Rcpp::traits::input_parameter< StringVector >::type phyloTipLabels(phyloTipLabelsSEXP);
    Rcpp::traits::input_parameter< List >::type spEdges(spEdgesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type edgeArea(edgeAreaSEXP);
    rcpp_result_gen = Rcpp::wrap(calcRWTurnover_phyloRangeWeighted_singleCell(focalCell, nbList, phyloTipLabels, spEdges, edgeArea));
    return rcpp_result_gen;
END_RCPP
}
// getCellFromRowCol
int getCellFromRowCol(int rowInd, int colInd, int nCol);
RcppExport SEXP _speciesRaster_getCellFromRowCol(SEXP rowIndSEXP, SEXP colIndSEXP, SEXP nColSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type rowInd(rowIndSEXP);
    Rcpp::traits::input_parameter< int >::type colInd(colIndSEXP);
    Rcpp::traits::input_parameter< int >::type nCol(nColSEXP);
    rcpp_result_gen = Rcpp::wrap(getCellFromRowCol(rowInd, colInd, nCol));
    return rcpp_result_gen;
END_RCPP
}
// getMovingWindowCells
std::vector<int> getMovingWindowCells(int nRow, int nCol, int focalCell, int radius, std::vector<int> rasterValues);
RcppExport SEXP _speciesRaster_getMovingWindowCells(SEXP nRowSEXP, SEXP nColSEXP, SEXP focalCellSEXP, SEXP radiusSEXP, SEXP rasterValuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type nRow(nRowSEXP);
    Rcpp::traits::input_parameter< int >::type nCol(nColSEXP);
    Rcpp::traits::input_parameter< int >::type focalCell(focalCellSEXP);
    Rcpp::traits::input_parameter< int >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type rasterValues(rasterValuesSEXP);
    rcpp_result_gen = Rcpp::wrap(getMovingWindowCells(nRow, nCol, focalCell, radius, rasterValues));
    return rcpp_result_gen;
END_RCPP
}
// calcRWTurnover_taxonomic
NumericVector calcRWTurnover_taxonomic(List spByCell, int radius, int rasterNRow, int rasterNCol, NumericVector rasterValuesR, NumericVector nonNAcellsR, bool showProgress);
RcppExport SEXP _speciesRaster_calcRWTurnover_taxonomic(SEXP spByCellSEXP, SEXP radiusSEXP, SEXP rasterNRowSEXP, SEXP rasterNColSEXP, SEXP rasterValuesRSEXP, SEXP nonNAcellsRSEXP, SEXP showProgressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type spByCell(spByCellSEXP);
    Rcpp::traits::input_parameter< int >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< int >::type rasterNRow(rasterNRowSEXP);
    Rcpp::traits::input_parameter< int >::type rasterNCol(rasterNColSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rasterValuesR(rasterValuesRSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nonNAcellsR(nonNAcellsRSEXP);
    Rcpp::traits::input_parameter< bool >::type showProgress(showProgressSEXP);
    rcpp_result_gen = Rcpp::wrap(calcRWTurnover_taxonomic(spByCell, radius, rasterNRow, rasterNCol, rasterValuesR, nonNAcellsR, showProgress));
    return rcpp_result_gen;
END_RCPP
}
// calcRWTurnover_rangeWeighted
NumericVector calcRWTurnover_rangeWeighted(List spByCell, int radius, int rasterNRow, int rasterNCol, NumericVector rasterValuesR, NumericVector nonNAcellsR, NumericVector cellCountsR, bool showProgress);
RcppExport SEXP _speciesRaster_calcRWTurnover_rangeWeighted(SEXP spByCellSEXP, SEXP radiusSEXP, SEXP rasterNRowSEXP, SEXP rasterNColSEXP, SEXP rasterValuesRSEXP, SEXP nonNAcellsRSEXP, SEXP cellCountsRSEXP, SEXP showProgressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type spByCell(spByCellSEXP);
    Rcpp::traits::input_parameter< int >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< int >::type rasterNRow(rasterNRowSEXP);
    Rcpp::traits::input_parameter< int >::type rasterNCol(rasterNColSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rasterValuesR(rasterValuesRSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nonNAcellsR(nonNAcellsRSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cellCountsR(cellCountsRSEXP);
    Rcpp::traits::input_parameter< bool >::type showProgress(showProgressSEXP);
    rcpp_result_gen = Rcpp::wrap(calcRWTurnover_rangeWeighted(spByCell, radius, rasterNRow, rasterNCol, rasterValuesR, nonNAcellsR, cellCountsR, showProgress));
    return rcpp_result_gen;
END_RCPP
}
// calcRWTurnover_phyloRangeWeighted
NumericVector calcRWTurnover_phyloRangeWeighted(List spByCell, int radius, int rasterNRow, int rasterNCol, NumericVector rasterValuesR, NumericVector nonNAcellsR, List phylo, List spEdges, NumericMatrix edgeArea, bool showProgress);
RcppExport SEXP _speciesRaster_calcRWTurnover_phyloRangeWeighted(SEXP spByCellSEXP, SEXP radiusSEXP, SEXP rasterNRowSEXP, SEXP rasterNColSEXP, SEXP rasterValuesRSEXP, SEXP nonNAcellsRSEXP, SEXP phyloSEXP, SEXP spEdgesSEXP, SEXP edgeAreaSEXP, SEXP showProgressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< List >::type spByCell(spByCellSEXP);
    Rcpp::traits::input_parameter< int >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< int >::type rasterNRow(rasterNRowSEXP);
    Rcpp::traits::input_parameter< int >::type rasterNCol(rasterNColSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rasterValuesR(rasterValuesRSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nonNAcellsR(nonNAcellsRSEXP);
    Rcpp::traits::input_parameter< List >::type phylo(phyloSEXP);
    Rcpp::traits::input_parameter< List >::type spEdges(spEdgesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type edgeArea(edgeAreaSEXP);
    Rcpp::traits::input_parameter< bool >::type showProgress(showProgressSEXP);
    rcpp_result_gen = Rcpp::wrap(calcRWTurnover_phyloRangeWeighted(spByCell, radius, rasterNRow, rasterNCol, rasterValuesR, nonNAcellsR, phylo, spEdges, edgeArea, showProgress));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_speciesRaster_spListPerCell", (DL_FUNC) &_speciesRaster_spListPerCell, 1},
    {"_speciesRaster_sort_", (DL_FUNC) &_speciesRaster_sort_, 2},
    {"_speciesRaster_returnTopIndices", (DL_FUNC) &_speciesRaster_returnTopIndices, 2},
    {"_speciesRaster_meanNNdist", (DL_FUNC) &_speciesRaster_meanNNdist, 1},
    {"_speciesRaster_cellAvg", (DL_FUNC) &_speciesRaster_cellAvg, 3},
    {"_speciesRaster_intersectList", (DL_FUNC) &_speciesRaster_intersectList, 2},
    {"_speciesRaster_flattenMatrix", (DL_FUNC) &_speciesRaster_flattenMatrix, 1},
    {"_speciesRaster_LegendreDiffIndex", (DL_FUNC) &_speciesRaster_LegendreDiffIndex, 2},
    {"_speciesRaster_jaccardDissimilarity", (DL_FUNC) &_speciesRaster_jaccardDissimilarity, 2},
    {"_speciesRaster_jaccardTurnover", (DL_FUNC) &_speciesRaster_jaccardTurnover, 2},
    {"_speciesRaster_jaccardNestedness", (DL_FUNC) &_speciesRaster_jaccardNestedness, 2},
    {"_speciesRaster_ListIsEmpty", (DL_FUNC) &_speciesRaster_ListIsEmpty, 1},
    {"_speciesRaster_ListIsEmptyR", (DL_FUNC) &_speciesRaster_ListIsEmptyR, 1},
    {"_speciesRaster_whichCpp", (DL_FUNC) &_speciesRaster_whichCpp, 1},
    {"_speciesRaster_characterUnlist", (DL_FUNC) &_speciesRaster_characterUnlist, 1},
    {"_speciesRaster_naomit", (DL_FUNC) &_speciesRaster_naomit, 1},
    {"_speciesRaster_dropNeg", (DL_FUNC) &_speciesRaster_dropNeg, 1},
    {"_speciesRaster_multiPrepCpp", (DL_FUNC) &_speciesRaster_multiPrepCpp, 1},
    {"_speciesRaster_multiPrep", (DL_FUNC) &_speciesRaster_multiPrep, 1},
    {"_speciesRaster_betaJAC", (DL_FUNC) &_speciesRaster_betaJAC, 1},
    {"_speciesRaster_betaJTU", (DL_FUNC) &_speciesRaster_betaJTU, 1},
    {"_speciesRaster_betaJNE", (DL_FUNC) &_speciesRaster_betaJNE, 1},
    {"_speciesRaster_betaSOR", (DL_FUNC) &_speciesRaster_betaSOR, 1},
    {"_speciesRaster_betaSIM", (DL_FUNC) &_speciesRaster_betaSIM, 1},
    {"_speciesRaster_betaSNE", (DL_FUNC) &_speciesRaster_betaSNE, 1},
    {"_speciesRaster_calcBetaPairwise", (DL_FUNC) &_speciesRaster_calcBetaPairwise, 3},
    {"_speciesRaster_calcBetaMultiSite", (DL_FUNC) &_speciesRaster_calcBetaMultiSite, 3},
    {"_speciesRaster_calcBetaMultiSiteBlock", (DL_FUNC) &_speciesRaster_calcBetaMultiSiteBlock, 3},
    {"_speciesRaster_mapComm", (DL_FUNC) &_speciesRaster_mapComm, 2},
    {"_speciesRaster_c_which_int", (DL_FUNC) &_speciesRaster_c_which_int, 2},
    {"_speciesRaster_getRootToTipEdges", (DL_FUNC) &_speciesRaster_getRootToTipEdges, 1},
    {"_speciesRaster_phyloBranchRanges", (DL_FUNC) &_speciesRaster_phyloBranchRanges, 3},
    {"_speciesRaster_countCells", (DL_FUNC) &_speciesRaster_countCells, 2},
    {"_speciesRaster_mergeLists", (DL_FUNC) &_speciesRaster_mergeLists, 1},
    {"_speciesRaster_getComponentA", (DL_FUNC) &_speciesRaster_getComponentA, 2},
    {"_speciesRaster_getComponentB", (DL_FUNC) &_speciesRaster_getComponentB, 2},
    {"_speciesRaster_getComponentC", (DL_FUNC) &_speciesRaster_getComponentC, 2},
    {"_speciesRaster_c_which_char", (DL_FUNC) &_speciesRaster_c_which_char, 2},
    {"_speciesRaster_weightedPhylo", (DL_FUNC) &_speciesRaster_weightedPhylo, 5},
    {"_speciesRaster_calcRWTurnover_taxonomic_old", (DL_FUNC) &_speciesRaster_calcRWTurnover_taxonomic_old, 2},
    {"_speciesRaster_calcRWTurnover_rangeWeighted_old", (DL_FUNC) &_speciesRaster_calcRWTurnover_rangeWeighted_old, 3},
    {"_speciesRaster_calcRWTurnover_phyloRangeWeighted_old", (DL_FUNC) &_speciesRaster_calcRWTurnover_phyloRangeWeighted_old, 5},
    {"_speciesRaster_calcRWTurnover_taxonomic_singleCell", (DL_FUNC) &_speciesRaster_calcRWTurnover_taxonomic_singleCell, 2},
    {"_speciesRaster_calcRWTurnover_rangeWeighted_singleCell", (DL_FUNC) &_speciesRaster_calcRWTurnover_rangeWeighted_singleCell, 3},
    {"_speciesRaster_calcRWTurnover_phyloRangeWeighted_singleCell", (DL_FUNC) &_speciesRaster_calcRWTurnover_phyloRangeWeighted_singleCell, 5},
    {"_speciesRaster_getCellFromRowCol", (DL_FUNC) &_speciesRaster_getCellFromRowCol, 3},
    {"_speciesRaster_getMovingWindowCells", (DL_FUNC) &_speciesRaster_getMovingWindowCells, 5},
    {"_speciesRaster_calcRWTurnover_taxonomic", (DL_FUNC) &_speciesRaster_calcRWTurnover_taxonomic, 7},
    {"_speciesRaster_calcRWTurnover_rangeWeighted", (DL_FUNC) &_speciesRaster_calcRWTurnover_rangeWeighted, 8},
    {"_speciesRaster_calcRWTurnover_phyloRangeWeighted", (DL_FUNC) &_speciesRaster_calcRWTurnover_phyloRangeWeighted, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_speciesRaster(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
