% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/createSpeciesRaster_mat.R
\name{createSpeciesRaster}
\alias{createSpeciesRaster}
\title{Create speciesRaster}
\usage{
createSpeciesRaster(ranges, resolution = 1, resUnits = "degrees",
  extent = "auto", coverCutoff = 0.5, nthreads = 1,
  rasterTemplate = NULL, probRanking = TRUE)
}
\arguments{
\item{ranges}{Either a list of SpatialPolygons, SpatialPolygonsDataFrames, a rasterstack,
rasterbrick, or species by cell matrix. If raster objects, cell values can either be
binary presence/absence, or probabilities.}

\item{resolution}{the size of the cells of the resulting raster (ignored if input is
raster)}

\item{resUnits}{if 'degrees', then raster will be unprojected, if 'meters' then raster
will be projected to equal area Behrmann projection (ignored if input is raster)}

\item{extent}{if 'auto', then the maximal extent of the polygons will be used, if 
input is raster, this will be ignored as the extent of the RasterStack will 
be used. If not auto, must be a numeric vector of length 4 with minLong, 
maxLong, minLat, maxLat.}

\item{coverCutoff}{only applies if input is SpatialPolygons. In rasterization of the
polygons, the percent of a raster cell that must be covered by the polygon for it to
count as a presence.}

\item{nthreads}{number of threads to use for parallelization of the function. The R
package    \code{parallel} must be loaded for \code{nthreads > 1}.}

\item{rasterTemplate}{If input is a species x cell matrix, then a rasterTemplate must be
provided.}

\item{probRanking}{If \code{ranges} is a rasterStack of probabilities rather than
presence/absence, then apply a probability ranking filter to identify species.
See details.}
}
\value{
an object of class \code{speciesRaster}.
}
\description{
This function takes a list of SpatialPolygons or a rasterStack and generates
both a richness raster and an associated list of species per cell, creating an object of class \code{speciesRaster}.
}
\details{
This function generates an object of class \code{speciesRaster}, which is a 
list containing the following elements:
\itemize{
	\item{raster} {A raster representing counts of species per cell.}
	\item{speciesList} {A list of species found in each cell.}
	\item{geogSpecies} {a vector of unique species in all cells.}
	\item{data} {An empty spot that morphological data can be added to.}
	\item{phylo} {An empty spot that a phylogeny can be added to.}
}
If input is a list of SpatialPolygons, then resolution must be specified.
The extent will be inferred as the minimum extent required to encompass all 
polygons. All cells within a polygon are considered as a presence for that species.

If input is a rasterStack, then all parameters are taken from that, and resolution
and extent arguments are ignored. If \code{probRanking = FALSE}, then any non-NA
and non-zero cell is considered a presence. If \code{probRanking = TRUE}, then 
cell values are evaluated as probabilities from 0 to 1, for example as output from 
species distribution models (SDM). The probability ranking filter was described in 
the SESAM framework (Guisan and Rahbek 2011, D'Amen et al. 2015) as a way to prevent
overprediction of species richness from SDMs. If \code{probRanking = TRUE}, then the
richness of a cell is calculated as the rounded sum of the probabilities of that cell,
and then that number of species is preserved, selected via probability ranking. 

This function expects that all input rasters in the rasterStack have presence values
(i.e., at least 1 non-NA value). If any rasters have exclusively NA cells, then the 
function will stop with a warning, and the output will be the index in the rasterStack
of those rasters.
}
\examples{
library(raster)
library(maptools)
# example dataset: a list of 24 chipmunk distributions as polygons
head(tamiasPolyList)

# convert polygon ranges to raster
# We will define our raster template where will specify extent, resolution and projection
listExtent <- getExtentOfList(tamiasPolyList)
template <- raster(ext = listExtent, res = c(20000, 20000), crs=proj4string(tamiasPolyList[[1]]))

# rasterize
ranges <- list()
for (i in 1:length(tamiasPolyList)) {
	cat(i, '\\n')
	tmp <- rasterize(tamiasPolyList[[i]], template)
	if (is.na(minValue(tmp))) {
		# species' range is too small and gets dropped
		# add back in
		presenceCells <- unique(cellFromXY(tmp, spsample(tamiasPolyList[[i]], 10, type='random')))
		tmp[presenceCells] <- 1
	}
	values(tmp)[!is.na(values(tmp))] <- 1
	ranges[[i]] <- tmp
}
names(ranges) <- names(tamiasPolyList)

ranges <- stack(ranges)

spRas <- createSpeciesRaster(ranges = ranges)

spRas



}
\references{
Guisan A., Rahbek C. 2011. SESAM - a new framework integrating macroecological and
species distribution models for predicting spatio-temporal patterns of species 
assemblages predicting spatio-temporal patterns of species assemblages. J. Biogeog.
38:1433-1444.

D'Amen M., Dubuis A., Fernandes R.F., Pottier J., Pellissier L., Guisan A. 2015. Using 
species richness and functional traits predictions to constrain assemblage predictions
from stacked species distribution models. J. Biogeog. 42:1255-1266.
}
\author{
Pascal Title
}
